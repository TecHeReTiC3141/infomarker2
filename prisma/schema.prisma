// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  user_id           Int?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  hasSubcription Boolean   @default(false)
  role           UserRole  @default(USER)
  checksLeft     Int       @default(5)
  reports        Report[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_requests")
}

model Report {
  id             Int              @id @default(autoincrement())
  filename       String
  text           String
  userId         Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  AgentOccurance AgentOccurance[]

  @@map("reports")
}

enum ForeignAgentType {
  PERSON
  ORGANISATION
}

model ForeignAgent {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  variants       String[]
  type           ForeignAgentType
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  AgentOccurance AgentOccurance[]

  @@map("foreign_agents")
}

model AgentOccurance {
  id             Int          @id @default(autoincrement())
  color          String
  count          Int
  reportId       Int
  report         Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  foreignAgentId Int
  foundVariants  String[]
  foreignAgent   ForeignAgent @relation(fields: [foreignAgentId], references: [id], onDelete: Cascade)

  @@map("agent_occurances")
}
